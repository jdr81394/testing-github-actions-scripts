# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env: 
      STAGING: "gs://locals-1/locales-staging/locales/"
      PRODUCTION: ""

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Get specific changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v27

      - name: Authenticate into GCP
        run: |
          echo "$GCP_SA_KEY" > ${HOME}/service-account-key.json
          gcloud auth activate-service-account --key-file=${HOME}/service-account-key.json --project=$GCP_PROJECT_ID
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Run step for all changed files and put into Github Env
        run: |
          configPaths=()

          for file in ${{ steps.changed-files-specific.outputs.all_changed_files }}; do
            if [[ ${file:0:7} = "config/" ]]; then
                configPaths+=(${file:7}})
            fi;
          done

          echo "This is the config path: $configPaths"
          echo "CONFIG_PATHS=${configPaths[@]}" >> $GITHUB_ENV

      - name: Loop through the GCP buckets, and add the files
        run: |
          buckets=$( gsutil ls "${{ env.STAGING }}" )
          for changedFile in $CONFIG_PATHS; do
            for bucket in $buckets; do
                echo THIS IS: "$bucket""$changedFile"
                gsutil cp $changedFile "$bucket""$changedFile"
            done;
          done;
        

      # - name: Get all bucket files that exist and put into Github ENV
      #   run: |
      #     gsbuckets=$(gsutil ls "${{ env.STAGING }}" )
      #     fileArr=()
      #     for bucketFile in $gsbuckets; do
      #       fileArr+=$( echo $bucketFile | rev | cut -d'/' -f1 | rev )
      #     done;

      #     echo "gcpBuckets=$fileArr" >> $GITHUB_ENV

      # - name: Loop through the GCP buckets, and see if any of the buckets match in name
      #   run: |
      #     for changedFile in $CONFIG_PATHS; do
      #       for bucketFile in $GCP_BUCKETS; do
      #         fileInBucket=$( echo $bucketFile | rev | cut -d'/' -f1 | rev)
      #         if [[ changedFile == fileInBucket ]]; then
      #           gsutil cp changedFile "$STAGING"/"changedFile"
      #         fi;
      #       done;
      #     done;
      #   env:
      #     CONFIG_PATHS: ${{ env.configPaths }}
      #     GCP_BUCKETS: ${{ env.gcpBuckets }}
